/**
 * @file airqualitymanager.h
 * @brief Header file for the AirQualityManager class.
 * @author Generated by Grok
 * @date 2025-04-22
 *
 * Defines the AirQualityManager class, which handles fetching and managing
 * air quality data from external APIs.
 */

#pragma once
#include <QObject>
#include <QNetworkAccessManager>
#include <QList>
#include <QMap>
#include <QDateTime>

/**
 * @struct Station
 * @brief Represents an air quality monitoring station.
 */
struct Station {
    int id; ///< Unique identifier for the station.
    QString name; ///< Name of the station.
    double latitude; ///< Latitude of the station's location.
    double longitude; ///< Longitude of the station's location.
};

/**
 * @struct Sensor
 * @brief Represents a sensor at a monitoring station.
 */
struct Sensor {
    int stationId; ///< ID of the station the sensor belongs to.
    int id; ///< Unique identifier for the sensor.
    QString paramName; ///< Parameter measured by the sensor (e.g., PM10).
};

/**
 * @struct Measurement
 * @brief Represents a single measurement from a sensor.
 */
struct Measurement {
    int stationId; ///< ID of the station.
    QString paramName; ///< Parameter name (e.g., PM10).
    double value; ///< Measured value.
    QDateTime dateTime; ///< Timestamp of the measurement.
};

/**
 * @class AirQualityManager
 * @brief Manages fetching and storing air quality data from APIs.
 *
 * Provides methods to fetch stations, sensors, measurements, and coordinates,
 * and emits signals when data is available or errors occur.
 */
class AirQualityManager : public QObject {
    Q_OBJECT

public:
    /**
     * @brief Constructor for AirQualityManager.
     * @param parent Parent object, defaults to nullptr.
     */
    explicit AirQualityManager(QObject *parent = nullptr);

    /**
     * @brief Fetches the list of all monitoring stations.
     */
    void fetchStations();

    /**
     * @brief Fetches sensors for a specific station.
     * @param stationId ID of the station.
     */
    void fetchSensors(int stationId);

    /**
     * @brief Fetches measurement data for a specific sensor.
     * @param sensorId ID of the sensor.
     */
    void fetchSensorData(int sensorId);

    /**
     * @brief Fetches geographic coordinates for a given address.
     * @param address Address to geocode.
     */
    void fetchCoordinates(const QString &address);

    /**
     * @brief Gets the current online measurements.
     * @return Map of station IDs to lists of measurements.
     */
    QMap<int, QList<Measurement>> getOnlineMeasurements() const;

signals:
    /**
     * @brief Emitted when stations are successfully fetched.
     * @param stations List of fetched stations.
     */
    void stationsFetched(const QList<Station> &stations);

    /**
     * @brief Emitted when sensors are successfully fetched.
     * @param sensors List of fetched sensors.
     */
    void sensorsFetched(const QList<Sensor> &sensors);

    /**
     * @brief Emitted when measurements are successfully fetched.
     * @param measurements List of fetched measurements.
     */
    void measurementsFetched(const QList<Measurement> &measurements);

    /**
     * @brief Emitted when coordinates are successfully fetched.
     * @param latitude Latitude of the location.
     * @param longitude Longitude of the location.
     */
    void coordinatesFetched(double latitude, double longitude);

    /**
     * @brief Emitted when an error occurs during data fetching.
     * @param error Error message.
     */
    void errorOccurred(const QString &error);

private:
    QNetworkAccessManager *networkManager; ///< Manages network requests.
    QMap<int, QList<Measurement>> onlineMeasurements; ///< Stores online measurements.
};