/**
 * @file mainwindow.h
 * @brief Header file for the MainWindow class.
 * @author Generated by Grok
 * @date 2025-04-22
 *
 * Defines the MainWindow class, which serves as the main user interface
 * for the AirQualityMonitor application.
 */

#pragma once
#include <QMap>
#include <QMainWindow>
#include <QListWidget>
#include <QPushButton>
#include "AirQualityManager.h"
#include <QLineEdit>
#include <QTextEdit>
#include <QtCharts/QChartView>
#include <QtCharts/QLineSeries>
#include <QtCharts/QDateTimeAxis>
#include <QtCharts/QValueAxis>
#include <QComboBox>

/**
 * @class MainWindow
 * @brief The main window of the AirQualityMonitor application.
 *
 * Manages the user interface, including station selection, sensor data display,
 * measurement charts, and map visualization. Interacts with AirQualityManager
 * to fetch and process air quality data.
 */
class MainWindow : public QMainWindow {
    Q_OBJECT

public:
    /**
     * @brief Constructor for MainWindow.
     * @param parent Parent widget, defaults to nullptr.
     */
    MainWindow(QWidget *parent = nullptr);

    /**
     * @brief Calculates the distance between two geographic points.
     * @param lat1 Latitude of the first point in degrees.
     * @param lon1 Longitude of the first point in degrees.
     * @param lat2 Latitude of the second point in degrees.
     * @param lon2 Longitude of the second point in degrees.
     * @return Distance in kilometers.
     */
    double calculateDistance(double lat1, double lon1, double lat2, double lon2);

    /**
     * @brief Analyzes a list of measurements and updates the analysis text.
     * @param measurements List of measurements to analyze.
     */
    void analyzeMeasurements(const QList<Measurement> &measurements);

private slots:
    /**
     * @brief Handles the stationsFetched signal from AirQualityManager.
     * @param stations List of fetched stations.
     */
    void onStationsFetched(const QList<Station> &stations);

    /**
     * @brief Handles station selection from the station list widget.
     * @param item Selected list item.
     */
    void onStationClicked(QListWidgetItem *item);

    /**
     * @brief Handles the sensorsFetched signal from AirQualityManager.
     * @param sensors List of fetched sensors.
     */
    void onSensorsFetched(const QList<Sensor> &sensors);

    /**
     * @brief Handles sensor selection from the sensor list widget.
     * @param item Selected list item.
     */
    void onSensorClicked(QListWidgetItem *item);

    /**
     * @brief Handles the measurementsFetched signal from AirQualityManager.
     * @param measurements List of fetched measurements.
     */
    void onMeasurementsFetched(const QList<Measurement> &measurements);

    /**
     * @brief Filters stations based on search text input.
     * @param text Search text entered by the user.
     */
    void onSearchTextChanged(const QString &text);

    /**
     * @brief Initiates search for stations within a specified radius.
     */
    void onFindStationsInRadiusClicked();

    /**
     * @brief Handles the coordinatesFetched signal from AirQualityManager.
     * @param latitude Latitude of the fetched coordinates.
     * @param longitude Longitude of the fetched coordinates.
     */
    void onCoordinatesFetched(double latitude, double longitude);

    /**
     * @brief Saves current data to JSON files.
     */
    void onSaveDataClicked();

    /**
     * @brief Handles errors from AirQualityManager.
     * @param error Error message.
     */
    void onErrorOccurred(const QString &error);

    /**
     * @brief Updates the chart based on the selected time period.
     * @param period Selected time period.
     */
    void onPeriodChanged(const QString &period);

    /**
     * @brief Displays the map widget.
     */
    void onShowMapClicked();

    /**
     * @brief Handles station selection from the map widget.
     * @param stationId ID of the selected station.
     */
    void onStationSelectedFromMap(int stationId);

private:
    /**
     * @brief Saves stations to a JSON file.
     * @param stations List of stations to save.
     */
    void saveStationsToJson(const QList<Station> &stations);

    /**
     * @brief Saves sensors to a JSON file.
     * @param sensors List of sensors to save.
     */
    void saveSensorsToJson(const QList<Sensor> &sensors);

    /**
     * @brief Saves measurements to a JSON file.
     * @param measurements List of measurements to save.
     */
    void saveMeasurementsToJson(const QList<Measurement> &measurements);

    /**
     * @brief Loads stations from a JSON file.
     * @return List of loaded stations.
     */
    QList<Station> loadStationsFromJson();

    /**
     * @brief Loads sensors from a JSON file.
     * @return List of loaded sensors.
     */
    QList<Sensor> loadSensorsFromJson();

    /**
     * @brief Loads measurements from a JSON file.
     * @return List of loaded measurements.
     */
    QList<Measurement> loadMeasurementsFromJson();

    /**
     * @brief Updates the measurement chart with new data.
     * @param measurements List of measurements to display.
     */
    void updateChart(const QList<Measurement> &measurements);

    /**
     * @brief Loads offline data from JSON files.
     */
    void loadOfflineData();

    QLineEdit *searchLineEdit; ///< Line edit for searching stations.
    QLineEdit *addressLineEdit; ///< Line edit for entering address for radius search.
    QLineEdit *radiusLineEdit; ///< Line edit for entering radius in kilometers.
    QPushButton *findStationsButton; ///< Button to trigger radius-based station search.
    QPushButton *saveDataButton; ///< Button to save data to JSON.
    QPushButton *showMapButton; ///< Button to display the map.
    QListWidget *stationListWidget; ///< List widget for displaying stations.
    QListWidget *sensorListWidget; ///< List widget for displaying sensors.
    QListWidget *measurementListWidget; ///< List widget for displaying measurements.
    QTextEdit *analysisTextEdit; ///< Text edit for displaying measurement analysis.
    QComboBox *periodComboBox; ///< Combo box for selecting time period.
    QChartView *chartView; ///< Chart view for displaying measurement data.
    QLineSeries *series; ///< Line series for the chart.
    AirQualityManager *aqManager; ///< Manager for fetching air quality data.

    QList<Station> stations; ///< List of all stations.
    QList<Station> filteredStations; ///< List of filtered stations based on search.
    QList<Sensor> sensors; ///< List of sensors for the selected station.
    QList<Measurement> measurements; ///< List of measurements for the selected sensor.
    QMap<int, QList<Sensor>> offlineSensors; ///< Offline sensor data.
    QMap<int, QList<Measurement>> offlineMeasurements; ///< Offline measurement data.
};