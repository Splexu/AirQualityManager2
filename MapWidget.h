/**
 * @file MapWidget.h
 * @brief Header file for the MapWidget class.
 * @author Generated by Grok
 * @date 2025-04-22
 *
 * Defines the MapWidget class, which displays a map with station markers.
 */

#pragma once
#include <QWidget>
#include <QList>
#include <QPushButton>
#include <QVBoxLayout>
#include "AirQualityManager.h"

/**
 * @class MapWidget
 * @brief Displays a map with air quality station markers.
 *
 * Allows users to interact with stations by clicking markers to view details.
 */
class MapWidget : public QWidget {
    Q_OBJECT

public:
    /**
     * @brief Constructor for MapWidget.
     * @param stations List of stations to display.
     * @param offlineMeasurements Offline measurement data.
     * @param onlineMeasurements Online measurement data.
     * @param parent Parent widget, defaults to nullptr.
     */
    explicit MapWidget(const QList<Station> &stations,
                       const QMap<int, QList<Measurement>> &offlineMeasurements,
                       const QMap<int, QList<Measurement>> &onlineMeasurements,
                       QWidget *parent = nullptr);

protected:
    /**
     * @brief Paints the map and station markers.
     * @param event Paint event.
     */
    void paintEvent(QPaintEvent *event) override;

    /**
     * @brief Handles mouse clicks to select stations.
     * @param event Mouse event.
     */
    void mousePressEvent(QMouseEvent *event) override;

signals:
    /**
     * @brief Emitted when a station is selected.
     * @param stationId ID of the selected station.
     */
    void stationSelected(int stationId);

private slots:
    /**
     * @brief Closes the map widget.
     */
    void onCloseMapClicked();

private:
    /**
     * @struct StationMarker
     * @brief Represents a station marker on the map.
     */
    struct StationMarker {
        Station station; ///< The station data.
        QPointF position; ///< Pixel position on the map.
    };

    /**
     * @brief Converts latitude and longitude to pixel coordinates.
     * @param latitude Latitude in degrees.
     * @param longitude Longitude in degrees.
     * @return Pixel position on the map.
     */
    QPointF latLonToPixel(double latitude, double longitude);

    /**
     * @brief Displays information about a selected station.
     * @param station The selected station.
     */
    void showStationInfo(const Station &station);

    /**
     * @brief Analyzes measurements by parameter.
     * @param measurements List of measurements to analyze.
     * @return Formatted analysis string.
     */
    QString analyzeMeasurementsByParameter(const QList<Measurement> &measurements);

    /**
     * @brief Initializes station markers.
     * @param stations List of stations to initialize.
     */
    void initializeMarkers(const QList<Station> &stations);

    QList<StationMarker> markers; ///< List of station markers.
    QPixmap mapImage; ///< Map image (poland_map.png).
    QMap<int, QList<Measurement>> offlineMeasurements; ///< Offline measurement data.
    QMap<int, QList<Measurement>> onlineMeasurements; ///< Online measurement data.
    QPushButton *closeMapButton; ///< Button to close the map.
    QVBoxLayout *layout; ///< Layout for the widget.
    bool mapLoaded; ///< Indicates if the map image was loaded.
};